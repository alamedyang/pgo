# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2018-09-29 21:10
from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion


def add_candy_costs(apps, schema_editor):
    CPM = apps.get_model('pgo', 'CPM')
    candy_cost_per_powerup = [
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        6, 6, 6, 6,
        8, 8, 8, 8,
        10, 10, 10, 10,
        12, 12, 12, 12,
        15, 15
    ]

    total_candy_cost = 0
    for i, cpm in enumerate(CPM.objects.filter(raid_cpm=False).exclude(level=40.0)):
        cpm.candy_cost = candy_cost_per_powerup[i]
        cpm.total_candy_cost = total_candy_cost
        cpm.save()
        total_candy_cost += candy_cost_per_powerup[i]

def add_friendship_levels(apps, schema_editor):
    Friendship = apps.get_model('pgo', 'Friendship')
    friendship_data = [
        ('No friend', 1.00),
        ('Good', 1.03),
        ('Great', 1.05),
        ('Ultra', 1.07),
        ('Best', 1.10),
    ]
    for item in friendship_data:
        Friendship.objects.get_or_create(level=item[0], damage_boost=item[1])

def update_raid_boss_status(apps, schema_editor):
    RaidBoss = apps.get_model('pgo', 'RaidBoss')

    RaidBoss.objects.exclude(status='').update(status=RaidBossStatus.OFFICIAL)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CPM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.DecimalField(decimal_places=1, max_digits=3)),
                ('value', models.DecimalField(decimal_places=9, max_digits=10)),
                ('raid_cpm', models.BooleanField(default=False)),
                ('raid_tier', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ('level',),
                'verbose_name': 'CP multiplier',
                'verbose_name_plural': 'CP multiplier',
            },
        ),
        migrations.CreateModel(
            name='Move',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('category', models.CharField(choices=[('QK', 'Quick'), ('CC', 'Cinematic')], max_length=2)),
                ('power', models.IntegerField(blank=True, default=0)),
                ('energy_delta', models.IntegerField(blank=True, default=0)),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('damage_window_start', models.IntegerField(blank=True, null=True)),
                ('damage_window_end', models.IntegerField(blank=True, null=True)),
                ('dps', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='DPS')),
                ('eps', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='EPS')),
            ],
            options={
                'ordering': ('-category', 'name'),
            },
        ),
        migrations.CreateModel(
            name='MoveSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('key', models.CharField(blank=True, max_length=50)),
                ('legacy', models.BooleanField(default=False)),
                ('weave_damage', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'ordering': ('pokemon__number', 'weave_damage'),
            },
        ),
        migrations.CreateModel(
            name='Pokemon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('number', models.CharField(max_length=5)),
                ('pgo_attack', models.IntegerField(blank=True, null=True, verbose_name='PGo Attack')),
                ('pgo_defense', models.IntegerField(blank=True, null=True, verbose_name='PGo Defense')),
                ('pgo_stamina', models.IntegerField(blank=True, null=True, verbose_name='PGo Stamina')),
                ('maximum_cp', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Combat Power')),
                ('legendary', models.BooleanField(default=False)),
                ('attack', models.IntegerField(blank=True, null=True)),
                ('special_attack', models.IntegerField(blank=True, null=True)),
                ('defense', models.IntegerField(blank=True, null=True)),
                ('special_defense', models.IntegerField(blank=True, null=True)),
                ('stamina', models.IntegerField(blank=True, null=True)),
                ('speed', models.IntegerField(blank=True, null=True)),
                ('cinematic_moves', models.ManyToManyField(blank=True, related_name='cinematic_moves_pokemon', to='pgo.Move')),
            ],
            options={
                'ordering': ('number',),
                'verbose_name': 'Pokemon',
                'verbose_name_plural': 'Pokemon',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('order', models.PositiveIntegerField(blank=True, null=True)),
                ('strong', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('feeble', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('resistant', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('weak', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('immune', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('puny', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'ordering': ('slug',),
            },
        ),
        migrations.CreateModel(
            name='TypeEffectivness',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relation', models.CharField(blank=True, max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='TypeEffectivnessScalar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('scalar', models.DecimalField(decimal_places=3, max_digits=4)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='typeeffectivness',
            name='effectivness',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.TypeEffectivnessScalar'),
        ),
        migrations.AddField(
            model_name='typeeffectivness',
            name='type_defense',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='type_defense', to='pgo.Type'),
        ),
        migrations.AddField(
            model_name='typeeffectivness',
            name='type_offense',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='type_offense', to='pgo.Type'),
        ),
        migrations.AddField(
            model_name='pokemon',
            name='primary_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_types', to='pgo.Type'),
        ),
        migrations.AddField(
            model_name='pokemon',
            name='quick_moves',
            field=models.ManyToManyField(blank=True, related_name='quick_moves_pokemon', to='pgo.Move'),
        ),
        migrations.AddField(
            model_name='pokemon',
            name='secondary_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='secondary_types', to='pgo.Type'),
        ),
        migrations.AddField(
            model_name='pokemon',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='moveset',
            name='pokemon',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pgo.Pokemon'),
        ),
        migrations.AddField(
            model_name='moveset',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='move',
            name='move_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pgo.Type'),
        ),
        migrations.AddField(
            model_name='move',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='moveset',
            unique_together=set([('pokemon', 'key')]),
        ),
        migrations.AlterModelOptions(
            name='moveset',
            options={'ordering': ('pokemon__name', '-weave_damage')},
        ),
        migrations.AddField(
            model_name='pokemon',
            name='raid_stamina',
            field=models.IntegerField(blank=True, null=True, verbose_name='Override for raid stamina'),
        ),
        migrations.CreateModel(
            name='RaidTier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tier', models.PositiveIntegerField(verbose_name='Tier Level')),
                ('tier_stamina', models.PositiveIntegerField(verbose_name='Tier Stamina')),
                ('raid_cpm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.CPM', verbose_name='Raid CPM')),
            ],
            options={
                'ordering': ('-tier',),
                'verbose_name': 'Raid Tier',
                'verbose_name_plural': 'Raid Tiers',
            },
        ),
        migrations.AddField(
            model_name='pokemon',
            name='raid_tier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pgo.RaidTier', verbose_name='Raid Tier'),
        ),
        migrations.CreateModel(
            name='RaidBoss',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pokemon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.Pokemon', verbose_name='Pokemon')),
                ('raid_tier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.RaidTier', verbose_name='Raid Tier')),
                ('status', models.CharField(blank=True, choices=[('anticipated', 'Anticipated'), ('current', 'Current'), ('exclusive', 'Exclusive'), ('past', 'Past')], max_length=20)),
            ],
            options={
                'ordering': ('-raid_tier__tier', 'pokemon__name'),
                'verbose_name': 'Raid Boss',
                'verbose_name_plural': 'Raid Bosses',
            },
        ),
        migrations.AlterModelOptions(
            name='cpm',
            options={'ordering': ('-raid_cpm', 'level'), 'verbose_name': 'CP multiplier', 'verbose_name_plural': 'CP multiplier'},
        ),
        migrations.RemoveField(
            model_name='pokemon',
            name='raid_stamina',
        ),
        migrations.RemoveField(
            model_name='pokemon',
            name='raid_tier',
        ),
        migrations.AddField(
            model_name='cpm',
            name='stardust_cost',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='cpm',
            name='total_stardust_cost',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name='WeatherCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('types_boosted', models.ManyToManyField(blank=True, to='pgo.Type', verbose_name='Boosts Type')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('order', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ('slug',),
                'verbose_name': 'Weather Condition',
                'verbose_name_plural': 'Weather Conditions',
            },
        ),
        migrations.CreateModel(
            name='PokemonMove',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('legacy', models.BooleanField(default=False)),
                ('stab', models.BooleanField(default=False)),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('move', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.Move')),
                ('pokemon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.Pokemon')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('pokemon', '-stab', '-score'),
            },
        ),
        migrations.AddField(
            model_name='moveset',
            name='cinematic_move',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cinematic_moves', to='pgo.PokemonMove'),
        ),
        migrations.AddField(
            model_name='moveset',
            name='quick_move',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quick_moves', to='pgo.PokemonMove'),
        ),
        migrations.AlterUniqueTogether(
            name='pokemonmove',
            unique_together=set([('pokemon', 'move')]),
        ),
        migrations.AddField(
            model_name='cpm',
            name='candy_cost',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='cpm',
            name='total_candy_cost',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=add_candy_costs,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.CreateModel(
            name='TopCounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('defender_cpm', models.DecimalField(decimal_places=9, max_digits=10)),
                ('highest_dps', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Highest DPS')),
                ('moveset_data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('counter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='counters', to='pgo.Pokemon')),
                ('defender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='defenders', to='pgo.Pokemon')),
                ('weather_condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.WeatherCondition')),
                ('counter_hp', models.PositiveIntegerField(blank=True, null=True)),
                ('multiplier', models.DecimalField(blank=True, decimal_places=27, max_digits=29, null=True)),
                ('score', models.PositiveIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.AlterModelOptions(
            name='pokemonmove',
            options={'ordering': ('pokemon', '-score', '-stab')},
        ),
        migrations.AlterUniqueTogether(
            name='topcounter',
            unique_together=set([('defender', 'defender_cpm', 'weather_condition', 'counter')]),
        ),
        migrations.AddField(
            model_name='raidtier',
            name='battle_duration',
            field=models.PositiveIntegerField(default=180),
        ),
        migrations.AddField(
            model_name='pokemon',
            name='implemented',
            field=models.BooleanField(default=True),
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(max_length=9)),
                ('damage_boost', models.DecimalField(decimal_places=2, max_digits=3)),
            ],
            options={
                'verbose_name': 'Friendship',
                'verbose_name_plural': 'Friendship',
                'ordering': ('damage_boost',),
            },
        ),
        migrations.AlterUniqueTogether(
            name='friendship',
            unique_together=set([('level', 'damage_boost')]),
        ),
        migrations.RunPython(
            code=add_friendship_levels,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name='raidtier',
            name='order',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='raidboss',
            name='status',
            field=models.CharField(blank=True, choices=[('official', 'Official'), ('simulated', 'Simulated')], max_length=20),
        ),
        migrations.RunPython(
            code=update_raid_boss_status,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
    ]
