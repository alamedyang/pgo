# Generated by Django 2.2.12 on 2020-04-22 11:08

import datetime
from decimal import Decimal

from django.conf import settings
from django.db import migrations, models
import django.contrib.postgres.fields.jsonb
import django.db.migrations.operations.special
import django.db.models.deletion

from pgo.models import Generation


def add_candy_costs(apps, schema_editor):
    CPM = apps.get_model('pgo', 'CPM')
    candy_cost_per_powerup = [
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        6, 6, 6, 6,
        8, 8, 8, 8,
        10, 10, 10, 10,
        12, 12, 12, 12,
        15, 15
    ]

    total_candy_cost = 0
    for i, cpm in enumerate(CPM.objects.filter(raid_cpm=False).exclude(level=40.0)):
        cpm.candy_cost = candy_cost_per_powerup[i]
        cpm.total_candy_cost = total_candy_cost
        cpm.save()
        total_candy_cost += candy_cost_per_powerup[i]


def add_friendship_levels(apps, schema_editor):
    Friendship = apps.get_model('pgo', 'Friendship')
    friendship_data = [
        ('No friend', 1.00),
        ('Good', 1.03),
        ('Great', 1.05),
        ('Ultra', 1.07),
        ('Best', 1.10),
    ]
    for item in friendship_data:
        Friendship.objects.get_or_create(level=item[0], damage_boost=item[1])


def migrate_pokemon_moves(apps, schema_editor):
    Pokemon = apps.get_model('pgo', 'Pokemon')
    PokemonMove = apps.get_model('pgo', 'PokemonMove')

    for pokemon in Pokemon.objects.all():
        quick_moves = PokemonMove.objects.filter(
            pokemon=pokemon, move_id__in=pokemon.quick_moves.values_list('id'))
        cinematic_moves = PokemonMove.objects.filter(
            pokemon=pokemon, move_id__in=pokemon.cinematic_moves.values_list('id'))
        pokemon.quick_moves.set(quick_moves)
        pokemon.cinematic_moves.set(cinematic_moves)
        pokemon.save()


def assign_generations(apps, schema_editor):
    Pokemon = apps.get_model('pgo', 'Pokemon')

    def assign_generation(pokemon_qs, generation):
        for pokemon in pokemon_qs:
            pokemon.generation = generation
            pokemon.save()

    pokemon_qs = Pokemon.objects.exclude(name__icontains='(A)')

    genI = pokemon_qs.all()[:151]
    assign_generation(genI, Generation.FIRST)

    genII = pokemon_qs.all()[151:251]
    assign_generation(genII, Generation.SECOND)

    genIII = pokemon_qs.all()[251:386]
    assign_generation(genIII, Generation.THIRD)

    genIV = pokemon_qs.all()[386:]
    assign_generation(genIV, Generation.FOURTH)

    alola_qs = Pokemon.objects.filter(name__icontains='(A)')
    for pokemon in alola_qs:
        pokemon.generation = Generation.SEVENTH
        pokemon.number = pokemon.number.replace('a', '')
        pokemon.slug = pokemon.slug.replace('-a', '-alolan')
        pokemon.name = pokemon.name.replace('(A)', '(Alolan)')
        pokemon.save()


def update_type_effectivness_scalars(apps, schema_editor):
    TypeEffectivnessScalar = apps.get_model('pgo', 'TypeEffectivnessScalar')

    for tfs in TypeEffectivnessScalar.objects.all():
        if tfs.slug == 'super-effective':
            tfs.scalar = Decimal('1.6')
        if tfs.slug == 'not-very-effective':
            tfs.scalar = Decimal('0.625')
        if tfs.slug == 'immune':
            tfs.scalar = Decimal('0.390625')
        tfs.save()


def update_type_effectivness(apps, schema_editor):
    Type = apps.get_model('pgo', 'Type')
    TypeEffectivnessScalar = apps.get_model('pgo', 'TypeEffectivnessScalar')

    weak = strong = TypeEffectivnessScalar.objects.get(slug='super-effective')
    feeble = resistant = TypeEffectivnessScalar.objects.get(slug='not-very-effective')
    puny = immune = TypeEffectivnessScalar.objects.get(slug='immune')

    for t in Type.objects.all():
        t.strong = [[x[0], str(strong.scalar)] for x in t.strong]
        t.feeble = [[x[0], str(feeble.scalar)] for x in t.feeble]
        t.puny = [[x[0], str(puny.scalar)] for x in t.puny]
        t.resistant = [[x[0], str(resistant.scalar)] for x in t.resistant]
        t.weak = [[x[0], str(weak.scalar)] for x in t.weak]
        t.immune = [[x[0], str(immune.scalar)] for x in t.immune]
        t.save()


def calculate_stat_product_and_bulk(apps, schema_editor):
    Pokemon = apps.get_model('pgo', 'Pokemon')

    for p in Pokemon.objects.all():
        p.stat_product = p.pgo_attack + p.pgo_defense + p.pgo_stamina
        p.bulk = p.pgo_defense * p.pgo_stamina
        p.save()


def create_move_availability(apps, schema_editor):
    MoveAvailability = apps.get_model('pgo', 'MoveAvailability')
    PokemonMove = apps.get_model('pgo', 'PokemonMove')

    MoveAvailability.objects.bulk_create([
        MoveAvailability(pokemon_move_id=pm_id)
        for pm_id in PokemonMove.objects.values_list('id', flat=True)
    ])


def migrate_move_properties(apps, schema_editor):
    PokemonMove = apps.get_model('pgo', 'PokemonMove')

    for pm in PokemonMove.objects.select_related('move__move_type'):
        pm.move_type = pm.move.move_type.slug
        pm.cinematic = pm.move.category == 'CC'
        pm.save()


def calculate_stat_product(apps, schema_editor):
    Pokemon = apps.get_model('pgo', 'Pokemon')

    for p in Pokemon.objects.all():
        p.stat_product = p.pgo_attack * p.pgo_defense * p.pgo_stamina
        p.save()


class Migration(migrations.Migration):

    replaces = [('pgo', '0001_squashed_0022_merge_20180926_2005'), ('pgo', '0002_auto_20180929_2121'), ('pgo', '0003_auto_20180929_2250'), ('pgo', '0004_auto_20181002_1902'), ('pgo', '0005_auto_20181003_2104'), ('pgo', '0006_auto_20181003_2107'), ('pgo', '0007_auto_20181120_1947'), ('pgo', '0008_remove_topcounter_defender_cpm'), ('pgo', '0009_auto_20181213_0814'), ('pgo', '0010_auto_20190106_0119'), ('pgo', '0011_auto_20190110_0821'), ('pgo', '0012_auto_20190110_0833'), ('pgo', '0013_auto_20190127_1048'), ('pgo', '0014_auto_20190127_1048'), ('pgo', '0015_auto_20190201_2303'), ('pgo', '0016_auto_20190204_0814'), ('pgo', '0017_auto_20190205_2236'), ('pgo', '0018_auto_20190205_2249'), ('pgo', '0019_auto_20190205_2257'), ('pgo', '0020_auto_20190206_2209'), ('pgo', '0021_auto_20190206_2209'), ('pgo', '0022_pokemonmove_legacy'), ('pgo', '0023_auto_20190207_0829'), ('pgo', '0024_auto_20190207_0830'), ('pgo', '0025_auto_20190207_0841'), ('pgo', '0026_auto_20190210_1122'), ('pgo', '0027_auto_20190218_0903'), ('pgo', '0028_pokemon_stat_product'), ('pgo', '0029_auto_20190726_0910'), ('pgo', '0030_auto_20190906_2311'), ('pgo', '0031_remove_raidboss_status'), ('pgo', '0032_auto_20190925_1959'), ('pgo', '0033_auto_20190929_2008'), ('pgo', '0034_cpm_buddy_cpm')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CPM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.DecimalField(decimal_places=1, max_digits=3)),
                ('value', models.DecimalField(decimal_places=9, max_digits=10)),
                ('raid_cpm', models.BooleanField(default=False)),
                ('raid_tier', models.PositiveIntegerField(blank=True, null=True)),
                ('stardust_cost', models.PositiveIntegerField(blank=True, null=True)),
                ('total_stardust_cost', models.PositiveIntegerField(blank=True, null=True)),
                ('candy_cost', models.PositiveIntegerField(blank=True, null=True)),
                ('total_candy_cost', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-raid_cpm', 'level'),
                'verbose_name': 'CP multiplier',
                'verbose_name_plural': 'CP multiplier',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('order', models.PositiveIntegerField(blank=True, null=True)),
                ('strong', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('feeble', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('resistant', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('weak', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('immune', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('puny', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'ordering': ('slug',),
            },
        ),
        migrations.CreateModel(
            name='TypeEffectivnessScalar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('scalar', models.DecimalField(decimal_places=3, max_digits=4)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TypeEffectivness',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relation', models.CharField(blank=True, max_length=30)),
                ('effectivness', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.TypeEffectivnessScalar')),
                ('type_defense', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='type_defense', to='pgo.Type')),
                ('type_offense', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='type_offense', to='pgo.Type')),
            ],
        ),
        migrations.CreateModel(
            name='Move',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('category', models.CharField(choices=[('QK', 'Quick'), ('CC', 'Cinematic')], max_length=2)),
                ('power', models.IntegerField(blank=True, default=0)),
                ('energy_delta', models.IntegerField(blank=True, default=0)),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('damage_window_start', models.IntegerField(blank=True, null=True)),
                ('damage_window_end', models.IntegerField(blank=True, null=True)),
                ('dps', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='DPS')),
                ('eps', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='EPS')),
                ('move_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pgo.Type')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-category', 'name'),
            },
        ),
        migrations.CreateModel(
            name='RaidTier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tier', models.PositiveIntegerField(verbose_name='Tier Level')),
                ('tier_stamina', models.PositiveIntegerField(verbose_name='Tier Stamina')),
                ('raid_cpm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.CPM', verbose_name='Raid CPM')),
            ],
            options={
                'ordering': ('-tier',),
                'verbose_name': 'Raid Tier',
                'verbose_name_plural': 'Raid Tiers',
            },
        ),
        migrations.CreateModel(
            name='Pokemon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('number', models.CharField(max_length=5)),
                ('pgo_attack', models.IntegerField(blank=True, null=True, verbose_name='PGo Attack')),
                ('pgo_defense', models.IntegerField(blank=True, null=True, verbose_name='PGo Defense')),
                ('pgo_stamina', models.IntegerField(blank=True, null=True, verbose_name='PGo Stamina')),
                ('maximum_cp', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Combat Power')),
                ('legendary', models.BooleanField(default=False)),
                ('attack', models.IntegerField(blank=True, null=True)),
                ('special_attack', models.IntegerField(blank=True, null=True)),
                ('defense', models.IntegerField(blank=True, null=True)),
                ('special_defense', models.IntegerField(blank=True, null=True)),
                ('stamina', models.IntegerField(blank=True, null=True)),
                ('speed', models.IntegerField(blank=True, null=True)),
                ('cinematic_moves', models.ManyToManyField(blank=True, related_name='cinematic_moves_pokemon', to='pgo.Move')),
                ('primary_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_types', to='pgo.Type')),
                ('quick_moves', models.ManyToManyField(blank=True, related_name='quick_moves_pokemon', to='pgo.Move')),
                ('secondary_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='secondary_types', to='pgo.Type')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('number',),
                'verbose_name': 'Pokemon',
                'verbose_name_plural': 'Pokemon',
            },
        ),
        migrations.CreateModel(
            name='RaidBoss',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pokemon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.Pokemon', verbose_name='Pokemon')),
                ('raid_tier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.RaidTier', verbose_name='Raid Tier')),
                ('status', models.CharField(blank=True, choices=[('anticipated', 'Anticipated'), ('current', 'Current'), ('exclusive', 'Exclusive'), ('past', 'Past')], max_length=20)),
            ],
            options={
                'ordering': ('-raid_tier__tier', 'pokemon__name'),
                'verbose_name': 'Raid Boss',
                'verbose_name_plural': 'Raid Bosses',
            },
        ),
        migrations.CreateModel(
            name='WeatherCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('types_boosted', models.ManyToManyField(blank=True, to='pgo.Type', verbose_name='Boosts Type')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('order', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ('slug',),
                'verbose_name': 'Weather Condition',
                'verbose_name_plural': 'Weather Conditions',
            },
        ),
        migrations.CreateModel(
            name='PokemonMove',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('legacy', models.BooleanField(default=False)),
                ('stab', models.BooleanField(default=False)),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('move', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.Move')),
                ('pokemon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.Pokemon')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('pokemon', '-stab', '-score'),
                'unique_together': {('pokemon', 'move')},
            },
        ),
        migrations.CreateModel(
            name='MoveSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('key', models.CharField(blank=True, max_length=50)),
                ('legacy', models.BooleanField(default=False)),
                ('weave_damage', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('pokemon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pgo.Pokemon')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('cinematic_move', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cinematic_moves', to='pgo.PokemonMove')),
                ('quick_move', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quick_moves', to='pgo.PokemonMove')),
            ],
            options={
                'ordering': ('pokemon__name', '-weave_damage'),
                'unique_together': {('pokemon', 'key')},
            },
        ),
        migrations.RunPython(
            code=add_candy_costs,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterModelOptions(
            name='pokemonmove',
            options={'ordering': ('pokemon', '-score', '-stab')},
        ),
        migrations.CreateModel(
            name='TopCounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('defender_cpm', models.DecimalField(decimal_places=9, max_digits=10)),
                ('highest_dps', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Highest DPS')),
                ('moveset_data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('counter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='counters', to='pgo.Pokemon')),
                ('defender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='defenders', to='pgo.Pokemon')),
                ('weather_condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.WeatherCondition')),
                ('counter_hp', models.PositiveIntegerField(blank=True, null=True)),
                ('multiplier', models.DecimalField(blank=True, decimal_places=27, max_digits=29, null=True)),
                ('score', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'unique_together': {('defender', 'defender_cpm', 'weather_condition', 'counter')},
            },
        ),
        migrations.AddField(
            model_name='raidtier',
            name='battle_duration',
            field=models.PositiveIntegerField(default=180),
        ),
        migrations.AddField(
            model_name='pokemon',
            name='implemented',
            field=models.BooleanField(default=True),
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(max_length=9)),
                ('damage_boost', models.DecimalField(decimal_places=2, max_digits=3)),
            ],
            options={
                'verbose_name': 'Friendship',
                'verbose_name_plural': 'Friendship',
                'ordering': ('damage_boost',),
                'unique_together': {('level', 'damage_boost')},
            },
        ),
        migrations.RunPython(
            code=add_friendship_levels,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name='raidtier',
            name='order',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='raidboss',
            name='status',
            field=models.CharField(blank=True, choices=[('official', 'Official'), ('simulated', 'Simulated')], max_length=20),
        ),
        migrations.AlterModelOptions(
            name='move',
            options={},
        ),
        migrations.AlterModelOptions(
            name='moveset',
            options={},
        ),
        migrations.AlterModelOptions(
            name='pokemon',
            options={'verbose_name': 'Pokemon', 'verbose_name_plural': 'Pokemon'},
        ),
        migrations.AlterModelOptions(
            name='weathercondition',
            options={'verbose_name': 'Weather Condition', 'verbose_name_plural': 'Weather Conditions'},
        ),
        migrations.AlterField(
            model_name='pokemon',
            name='cinematic_moves',
            field=models.ManyToManyField(blank=True, related_name='cinematic_moves_pokemon', to='pgo.PokemonMove'),
        ),
        migrations.AlterField(
            model_name='pokemon',
            name='quick_moves',
            field=models.ManyToManyField(blank=True, related_name='quick_moves_pokemon', to='pgo.PokemonMove'),
        ),
        migrations.RunPython(
            code=migrate_pokemon_moves,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterModelOptions(
            name='pokemon',
            options={'ordering': ('number',), 'verbose_name': 'Pokemon', 'verbose_name_plural': 'Pokemon'},
        ),
        migrations.AddField(
            model_name='pokemon',
            name='generation',
            field=models.CharField(blank=True, choices=[('I', 'I'), ('II', 'II'), ('III', 'III'), ('IV', 'IV'), ('V', 'V'), ('VI', 'VI'), ('VII', 'VII'), ('VIII', 'VIII')], max_length=5),
        ),
        migrations.RunPython(
            code=assign_generations,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterUniqueTogether(
            name='topcounter',
            unique_together={('defender', 'weather_condition', 'counter')},
        ),
        migrations.RemoveField(
            model_name='topcounter',
            name='defender_cpm',
        ),
        migrations.AlterField(
            model_name='typeeffectivnessscalar',
            name='scalar',
            field=models.DecimalField(decimal_places=6, max_digits=8),
        ),
        migrations.AddField(
            model_name='move',
            name='dpe',
            field=models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True, verbose_name='Damage per energy'),
        ),
        migrations.AddField(
            model_name='move',
            name='dpt',
            field=models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='Damage per turn'),
        ),
        migrations.AddField(
            model_name='move',
            name='ept',
            field=models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='Energy per turn'),
        ),
        migrations.AddField(
            model_name='move',
            name='pvp_duration',
            field=models.IntegerField(blank=True, default=0),
        ),
        migrations.AddField(
            model_name='move',
            name='pvp_energy_delta',
            field=models.IntegerField(blank=True, default=0),
        ),
        migrations.AddField(
            model_name='move',
            name='pvp_power',
            field=models.IntegerField(blank=True, default=0),
        ),
        migrations.AlterField(
            model_name='move',
            name='dps',
            field=models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='Damage per second'),
        ),
        migrations.AlterField(
            model_name='move',
            name='eps',
            field=models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='Energy per second'),
        ),
        migrations.AddField(
            model_name='pokemon',
            name='compound_resistance',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='pokemon',
            name='compound_weakness',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=update_type_effectivness_scalars,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=update_type_effectivness,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name='pokemon',
            name='bulk',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='pokemon',
            name='stat_product',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=calculate_stat_product_and_bulk,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.DeleteModel(
            name='TopCounter',
        ),
        migrations.RenameModel(
            old_name='TypeEffectivness',
            new_name='TypeEffectiveness',
        ),
        migrations.RenameModel(
            old_name='TypeEffectivnessScalar',
            new_name='TypeEffectivenessScalar',
        ),
        migrations.RenameField(
            model_name='typeeffectiveness',
            old_name='effectivness',
            new_name='effectiveness',
        ),
        migrations.RemoveField(
            model_name='pokemonmove',
            name='legacy',
        ),
        migrations.RemoveField(
            model_name='moveset',
            name='legacy',
        ),
        migrations.AlterUniqueTogether(
            name='moveset',
            unique_together={('pokemon', 'quick_move', 'cinematic_move')},
        ),
        migrations.CreateModel(
            name='MoveAvailability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('available_from', models.DateField(default=datetime.datetime(2016, 7, 6, 0, 0))),
                ('available_to', models.DateField(blank=True, null=True)),
                ('legacy_status', models.CharField(blank=True, choices=[('CD', 'Community day'), ('RD', 'Raid day'), ('QE', 'Quest encounter'), ('RM', 'Removed'), ('AC', 'Active')], default='AC', max_length=2, null=True)),
                ('pokemon_move', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.PokemonMove')),
            ],
            options={
                'verbose_name': 'Move availability',
                'verbose_name_plural': 'Move availability',
            },
        ),
        migrations.RunPython(
            code=create_move_availability,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name='moveavailability',
            name='legacy_status',
            field=models.CharField(choices=[('CD', 'Community day'), ('RD', 'Raid day'), ('QE', 'Quest encounter'), ('RM', 'Removed'), ('AC', 'Active')], default='AC', max_length=2),
        ),
        migrations.AddField(
            model_name='pokemonmove',
            name='cinematic',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='pokemonmove',
            name='move_type',
            field=models.CharField(choices=[('bug', 'Bug'), ('dark', 'Dark'), ('dragon', 'Dragon'), ('electric', 'Electric'), ('fairy', 'Fairy'), ('fighting', 'Fighting'), ('fire', 'Fire'), ('flying', 'Flying'), ('ghost', 'Ghost'), ('grass', 'Grass'), ('ground', 'Ground'), ('ice', 'Ice'), ('normal', 'Normal'), ('poison', 'Poison'), ('psychic', 'Psychic'), ('rock', 'Rock'), ('steel', 'Steel'), ('water', 'Water')], default='normal', max_length=10),
        ),
        migrations.RunPython(
            code=migrate_move_properties,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name='pokemonmove',
            name='legacy',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='pokemonmove',
            name='score',
            field=models.DecimalField(blank=True, db_index=True, decimal_places=2, max_digits=4, null=True),
        ),
        migrations.AlterField(
            model_name='pokemonmove',
            name='score',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True),
        ),
        migrations.RemoveField(
            model_name='move',
            name='active',
        ),
        migrations.RemoveField(
            model_name='move',
            name='created',
        ),
        migrations.RemoveField(
            model_name='move',
            name='user',
        ),
        migrations.RemoveField(
            model_name='moveset',
            name='active',
        ),
        migrations.RemoveField(
            model_name='moveset',
            name='created',
        ),
        migrations.RemoveField(
            model_name='moveset',
            name='user',
        ),
        migrations.RemoveField(
            model_name='pokemon',
            name='active',
        ),
        migrations.RemoveField(
            model_name='pokemon',
            name='created',
        ),
        migrations.RemoveField(
            model_name='pokemon',
            name='user',
        ),
        migrations.RemoveField(
            model_name='pokemonmove',
            name='active',
        ),
        migrations.RemoveField(
            model_name='pokemonmove',
            name='created',
        ),
        migrations.RemoveField(
            model_name='pokemonmove',
            name='user',
        ),
        migrations.RemoveField(
            model_name='type',
            name='active',
        ),
        migrations.RemoveField(
            model_name='type',
            name='created',
        ),
        migrations.RemoveField(
            model_name='type',
            name='user',
        ),
        migrations.RemoveField(
            model_name='weathercondition',
            name='active',
        ),
        migrations.RemoveField(
            model_name='weathercondition',
            name='created',
        ),
        migrations.RemoveField(
            model_name='weathercondition',
            name='user',
        ),
        migrations.RenameField(
            model_name='pokemon',
            old_name='stat_product',
            new_name='stat_sum',
        ),
        migrations.RenameModel(
            old_name='TypeEffectivenessScalar',
            new_name='EffectivenessScalar',
        ),
        migrations.DeleteModel(
            name='TypeEffectiveness',
        ),
        migrations.AddField(
            model_name='pokemon',
            name='stat_product',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=calculate_stat_product,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name='friendship',
            name='order',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='friendship',
            name='level',
            field=models.CharField(max_length=12),
        ),
        migrations.AlterModelOptions(
            name='move',
            options={'ordering': ('-category', 'name')},
        ),
        migrations.RemoveField(
            model_name='raidboss',
            name='status',
        ),
        migrations.AlterField(
            model_name='pokemonmove',
            name='score',
            field=models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4),
        ),
        migrations.AlterField(
            model_name='move',
            name='dpe',
            field=models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='Damage per energy'),
        ),
        migrations.AlterField(
            model_name='move',
            name='dps',
            field=models.DecimalField(blank=True, decimal_places=1, max_digits=6, null=True, verbose_name='Damage per second'),
        ),
        migrations.AlterField(
            model_name='move',
            name='dpt',
            field=models.DecimalField(blank=True, decimal_places=1, max_digits=6, null=True, verbose_name='Damage per turn'),
        ),
        migrations.AlterField(
            model_name='move',
            name='eps',
            field=models.DecimalField(blank=True, decimal_places=1, max_digits=6, null=True, verbose_name='Energy per second'),
        ),
        migrations.AlterField(
            model_name='move',
            name='ept',
            field=models.DecimalField(blank=True, decimal_places=1, max_digits=6, null=True, verbose_name='Energy per turn'),
        ),
        migrations.AddField(
            model_name='cpm',
            name='buddy_cpm',
            field=models.BooleanField(default=False),
        ),
    ]
