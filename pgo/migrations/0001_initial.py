# Generated by Django 3.0.8 on 2020-07-15 12:44

import datetime
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CPM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.DecimalField(decimal_places=1, max_digits=3)),
                ('value', models.DecimalField(decimal_places=9, max_digits=10)),
                ('buddy_cpm', models.BooleanField(default=False)),
                ('raid_cpm', models.BooleanField(default=False)),
                ('raid_tier', models.PositiveIntegerField(blank=True, null=True)),
                ('stardust_cost', models.PositiveIntegerField(blank=True, null=True)),
                ('total_stardust_cost', models.PositiveIntegerField(blank=True, null=True)),
                ('candy_cost', models.PositiveIntegerField(blank=True, null=True)),
                ('total_candy_cost', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'CP multiplier',
                'verbose_name_plural': 'CP multiplier',
                'ordering': ('-raid_cpm', 'level'),
            },
        ),
        migrations.CreateModel(
            name='EffectivenessScalar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('scalar', models.DecimalField(decimal_places=6, max_digits=8)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Move',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('category', models.CharField(choices=[('QK', 'Quick'), ('CC', 'Cinematic')], max_length=2)),
                ('power', models.IntegerField(blank=True, default=0)),
                ('energy_delta', models.IntegerField(blank=True, default=0)),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('damage_window_start', models.IntegerField(blank=True, null=True)),
                ('damage_window_end', models.IntegerField(blank=True, null=True)),
                ('pvp_power', models.IntegerField(blank=True, default=0)),
                ('pvp_energy_delta', models.IntegerField(blank=True, default=0)),
                ('pvp_duration', models.IntegerField(blank=True, default=0)),
                ('dps', models.DecimalField(blank=True, decimal_places=1, max_digits=6, null=True, verbose_name='Damage per second')),
                ('eps', models.DecimalField(blank=True, decimal_places=1, max_digits=6, null=True, verbose_name='Energy per second')),
                ('dpt', models.DecimalField(blank=True, decimal_places=1, max_digits=6, null=True, verbose_name='Damage per turn')),
                ('ept', models.DecimalField(blank=True, decimal_places=1, max_digits=6, null=True, verbose_name='Energy per turn')),
                ('dpe', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='Damage per energy')),
            ],
            options={
                'ordering': ('-category', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Pokemon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('number', models.CharField(max_length=5)),
                ('pgo_attack', models.IntegerField(blank=True, null=True, verbose_name='PGo Attack')),
                ('pgo_defense', models.IntegerField(blank=True, null=True, verbose_name='PGo Defense')),
                ('pgo_stamina', models.IntegerField(blank=True, null=True, verbose_name='PGo Stamina')),
                ('maximum_cp', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Combat Power')),
                ('stat_sum', models.IntegerField(blank=True, null=True)),
                ('stat_product', models.IntegerField(blank=True, null=True)),
                ('bulk', models.IntegerField(blank=True, null=True)),
                ('compound_resistance', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('compound_weakness', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('legendary', models.BooleanField(default=False)),
                ('shadow', models.BooleanField(default=False)),
                ('generation', models.CharField(blank=True, choices=[('I', 'I'), ('II', 'II'), ('III', 'III'), ('IV', 'IV'), ('V', 'V'), ('VI', 'VI'), ('VII', 'VII'), ('VIII', 'VIII')], max_length=5)),
                ('implemented', models.BooleanField(default=True)),
                ('attack', models.IntegerField(blank=True, null=True)),
                ('special_attack', models.IntegerField(blank=True, null=True)),
                ('defense', models.IntegerField(blank=True, null=True)),
                ('special_defense', models.IntegerField(blank=True, null=True)),
                ('stamina', models.IntegerField(blank=True, null=True)),
                ('speed', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Pokemon',
                'verbose_name_plural': 'Pokemon',
                'ordering': ('number',),
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('order', models.PositiveIntegerField(blank=True, null=True)),
                ('strong', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('feeble', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('puny', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('resistant', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('weak', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('immune', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'ordering': ('slug',),
            },
        ),
        migrations.CreateModel(
            name='WeatherCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('name', models.CharField(max_length=50, null=True)),
                ('order', models.PositiveIntegerField(blank=True, null=True)),
                ('types_boosted', models.ManyToManyField(blank=True, to='pgo.Type', verbose_name='Boosts Type')),
            ],
            options={
                'verbose_name': 'Weather Condition',
                'verbose_name_plural': 'Weather Conditions',
            },
        ),
        migrations.CreateModel(
            name='RaidTier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(blank=True, null=True)),
                ('tier', models.PositiveIntegerField(verbose_name='Tier Level')),
                ('tier_stamina', models.PositiveIntegerField(verbose_name='Tier Stamina')),
                ('battle_duration', models.PositiveIntegerField(default=180)),
                ('raid_cpm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.CPM', verbose_name='Raid CPM')),
            ],
            options={
                'verbose_name': 'Raid Tier',
                'verbose_name_plural': 'Raid Tiers',
                'ordering': ('-tier',),
            },
        ),
        migrations.CreateModel(
            name='RaidBoss',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pokemon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.Pokemon', verbose_name='Pokemon')),
                ('raid_tier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.RaidTier', verbose_name='Raid Tier')),
            ],
            options={
                'verbose_name': 'Raid Boss',
                'verbose_name_plural': 'Raid Bosses',
                'ordering': ('-raid_tier__tier', 'pokemon__name'),
            },
        ),
        migrations.CreateModel(
            name='PokemonMove',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cinematic', models.BooleanField(default=False)),
                ('legacy', models.BooleanField(default=False)),
                ('stab', models.BooleanField(default=False)),
                ('move_type', models.CharField(choices=[('bug', 'Bug'), ('dark', 'Dark'), ('dragon', 'Dragon'), ('electric', 'Electric'), ('fairy', 'Fairy'), ('fighting', 'Fighting'), ('fire', 'Fire'), ('flying', 'Flying'), ('ghost', 'Ghost'), ('grass', 'Grass'), ('ground', 'Ground'), ('ice', 'Ice'), ('normal', 'Normal'), ('poison', 'Poison'), ('psychic', 'Psychic'), ('rock', 'Rock'), ('steel', 'Steel'), ('water', 'Water')], default='normal', max_length=10)),
                ('score', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4)),
                ('move', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.Move')),
                ('pokemon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.Pokemon')),
            ],
            options={
                'ordering': ('pokemon', '-score', '-stab'),
                'unique_together': {('pokemon', 'move')},
            },
        ),
        migrations.AddField(
            model_name='pokemon',
            name='cinematic_moves',
            field=models.ManyToManyField(blank=True, related_name='cinematic_moves_pokemon', to='pgo.PokemonMove'),
        ),
        migrations.AddField(
            model_name='pokemon',
            name='primary_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_types', to='pgo.Type'),
        ),
        migrations.AddField(
            model_name='pokemon',
            name='quick_moves',
            field=models.ManyToManyField(blank=True, related_name='quick_moves_pokemon', to='pgo.PokemonMove'),
        ),
        migrations.AddField(
            model_name='pokemon',
            name='secondary_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='secondary_types', to='pgo.Type'),
        ),
        migrations.CreateModel(
            name='MoveAvailability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('available_from', models.DateField(default=datetime.datetime(2016, 7, 6, 0, 0))),
                ('available_to', models.DateField(blank=True, null=True)),
                ('legacy_status', models.CharField(choices=[('CD', 'Community day'), ('RD', 'Raid day'), ('QE', 'Quest encounter'), ('RM', 'Removed'), ('AC', 'Active')], default='AC', max_length=2)),
                ('pokemon_move', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pgo.PokemonMove')),
            ],
            options={
                'verbose_name': 'Move availability',
                'verbose_name_plural': 'Move availability',
            },
        ),
        migrations.AddField(
            model_name='move',
            name='move_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pgo.Type'),
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(max_length=12)),
                ('damage_boost', models.DecimalField(decimal_places=2, max_digits=3)),
                ('order', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Friendship',
                'verbose_name_plural': 'Friendship',
                'ordering': ('damage_boost',),
                'unique_together': {('level', 'damage_boost')},
            },
        ),
        migrations.CreateModel(
            name='Moveset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(blank=True, max_length=50)),
                ('weave_damage', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('cinematic_move', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cinematic_moves', to='pgo.PokemonMove')),
                ('pokemon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pgo.Pokemon')),
                ('quick_move', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quick_moves', to='pgo.PokemonMove')),
            ],
            options={
                'unique_together': {('pokemon', 'quick_move', 'cinematic_move')},
            },
        ),
    ]
